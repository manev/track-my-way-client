{"version":3,"file":"contacts.component.js","sourceRoot":"","sources":["contacts.component.ts"],"names":[],"mappings":"AAAA,kDAAkD;;;;;;;;;;;AAElD,qBAA6B,eAAe,CAAC,CAAA;AAE7C,8BAAyD,eAAe,CAAC,CAAA;AACzE,6BAAuB,cAAc,CAAC,CAAA;AAEtC,kCAAuB,kCAAkC,CAAC,CAAA;AAC1D,oCAAqB,oCAAoC,CAAC,CAAA;AAC1D,qBAAiB,qBAAqB,CAAC,CAAA;AAEvC,8BAA2B,sBAAsB,CAAC,CAAA;AAKlD;IACI,2BAAoB,UAAsB,EAC9B,QAAkB,EAClB,GAAkB,EAClB,MAAc;QAHN,eAAU,GAAV,UAAU,CAAY;QAC9B,aAAQ,GAAR,QAAQ,CAAU;QAClB,QAAG,GAAH,GAAG,CAAe;QAClB,WAAM,GAAN,MAAM,CAAQ;QAI1B,gBAAW,GAAQ,IAAI,CAAC;QACxB,aAAQ,GAAG,EAAE,CAAC;IAJd,CAAC;IAMD,yCAAa,GAAb,UAAc,OAAO;QACjB,2BAA2B;QAC3B,kCAAkC;QAClC,6BAA6B;QAC7B,uCAAuC;QACvC,0BAA0B;QAC1B,UAAU;QACV,gCAAgC;QAChC,cAAc;QACd,IAAI;QACJ,IAAI,KAAK,GAAG,qBAAK,CAAC,MAAM,CAAC,4BAAY,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7D,KAAK,CAAC,SAAS,CAAC,UAAA,IAAI,IAAM,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,oCAAQ,GAAR;QAAA,iBA2BC;QA1BG,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,uBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;aAChB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACtC,KAAK,CAAC,UAAA,MAAM,IAAI,OAAA,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAE1C,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAChC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAA,MAAM;YACpC,IAAI,IAAI,GAAG,KAAI,CAAC;YAChB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,MAAM,GAAG,qBAAK,CAAC,MAAM,CAAC;gBACtB,KAAK,EAAE,2BAA2B;gBAClC,OAAO,EAAE,IAAI,CAAC,SAAS,GAAG,+BAA+B;gBACzD,OAAO,EAAE,CAAC;wBACN,IAAI,EAAE,QAAQ;wBACd,OAAO,EAAE,UAAA,IAAI,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAA7B,CAA6B;qBACjD;oBACG;wBACI,IAAI,EAAE,IAAI;wBACV,OAAO,EAAE,UAAA,IAAI;4BACT,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACxD,CAAC;qBACJ;iBACJ;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,4CAAgB,GAAxB,UAAyB,cAAmB;QAA5C,iBA6BC;QA5BG,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE;aAClC,IAAI,CAAC,UAAC,KAAU;YACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;gBACZ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACnB,IAAI,WAAW,GAAG,KAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAC1C,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,WAAW,CAAC,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAA9C,CAA8C,CAAC,CAAC;gBACtF,IAAI,OAAO,GAAG,cAAI,CAAC,eAAe,EAAE,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,WAAW,EAAvC,CAAuC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhG,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO;oBAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;wBACvB,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,KAAK;4BAC9B,UAAU,CAAC,OAAO,CAAC,UAAA,IAAI;gCACnB,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gCAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;oCACxD,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gCAE1E,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,MAAM;oCACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oCACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACjC,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACX,CAAC;IAvFL;QAAC,oBAAI,CAAC;YACF,WAAW,EAAE,cAAI,CAAC,cAAc,CAAC,UAAU,CAAC;SAC/C,CAAC;;yBAAA;IAsFF,wBAAC;AAAD,CAAC,AArFD,IAqFC;AArFY,yBAAiB,oBAqF7B,CAAA","sourcesContent":["/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n\r\nimport {OnInit, NgZone} from \"@angular/core\";\r\n\r\nimport {Page, NavController, Alert, Modal, Loading} from 'ionic-angular';\r\nimport {Contacts} from \"ionic-native\";\r\n\r\nimport ServerHost from \"../../services/serverHostManager\";\r\nimport Settings from \"../../services/localDeviceSettings\";\r\nimport Util from \"../../services/util\";\r\nimport {User} from \"../../services/user\";\r\nimport {MapComponent} from \"../map/map.component\";\r\n\r\n@Page({\r\n    templateUrl: Util.GetTemplateUri(\"contacts\")\r\n})\r\nexport class ContactsComponent implements OnInit {\r\n    constructor(private serverHost: ServerHost,\r\n        private settings: Settings,\r\n        private nav: NavController,\r\n        private ngZone: NgZone) {\r\n    }\r\n\r\n    private loading: any;\r\n    hasContacts: any = null;\r\n    contacts = [];\r\n\r\n    startTracking(contact) {\r\n        // if (!contact.IsOnline) {\r\n        //     let prompt = Alert.create({\r\n        //         title: \"Warning!\",\r\n        //         subTitle: \"User is offline\",\r\n        //         buttons: ['OK']\r\n        //     });\r\n        //     this.nav.present(prompt);\r\n        //     return;\r\n        // }\r\n        let modal = Modal.create(MapComponent, { contact: contact });\r\n        modal.onDismiss(data => { });\r\n        this.nav.present(modal);\r\n    }\r\n\r\n    ngOnInit() {\r\n        let fields = [\"*\"];\r\n        Contacts.find(fields)\r\n            .then(this.onContactsLoaded.bind(this))\r\n            .catch(reason => alert(reason.error));\r\n\r\n        this.serverHost.emitLoginUser();\r\n        this.serverHost.onTrackingRequest(sender => {\r\n            let that = this;\r\n            let user = JSON.parse(sender);\r\n            let prompt = Alert.create({\r\n                title: \"Tracking request recieved\",\r\n                message: user.FirstName + \" wants to track your location\",\r\n                buttons: [{\r\n                    text: 'Cancel',\r\n                    handler: data => console.log('Cancel clicked')\r\n                },\r\n                    {\r\n                        text: 'OK',\r\n                        handler: data => {\r\n                            that.serverHost.requestTrackingResponse(user, true);\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n            that.nav.present(prompt);\r\n        });\r\n    }\r\n\r\n    private onContactsLoaded(deviceContacts: any) {\r\n        let that = this;\r\n\r\n        this.serverHost.getAllRegisteredUsers()\r\n            .then((users: any) => {\r\n                that.ngZone.run(() => {\r\n                    that.contacts = [];\r\n                    let currentUser = this.settings.getUser();\r\n                    let validUsers = users.filter(user => currentUser.Phone.Number !== user.Phone.Number);\r\n                    let country = Util.GetAllCountries().filter(item => item.alpha2 === currentUser.CountryCode)[0];\r\n\r\n                    deviceContacts.forEach(contact => {\r\n                        if (contact.phoneNumbers) {\r\n                            contact.phoneNumbers.forEach(phone => {\r\n                                validUsers.forEach(user => {\r\n                                    let number = user.Phone.Number;\r\n                                    if (!phone.value.startsWith(country.countryCallingCodes[0]))\r\n                                        number = user.Phone.Number.replace(country.countryCallingCodes[0], 0);\r\n\r\n                                    if (phone.value.replace(/\\s/g, '') === number &&\r\n                                        that.contacts.indexOf(user) === -1)\r\n                                        that.contacts.push(user);\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                    that.hasContacts = that.contacts.length > 0;\r\n                });\r\n            });\r\n    }\r\n}"]}
